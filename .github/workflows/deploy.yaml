name: Deploy AWS Security Scanner

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug AWS Secrets in Deploy Workflow
        run: |
          echo "üîç Checking AWS Secrets inside deploy.yaml..."
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]]; then
            echo "‚ùå AWS_ACCESS_KEY_ID is NOT available in deploy.yaml!"
            exit 1
          else
            echo "‚úÖ AWS_ACCESS_KEY_ID is available in deploy.yaml."
          fi

          if [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY is NOT available in deploy.yaml!"
            exit 1
          else
            echo "‚úÖ AWS_SECRET_ACCESS_KEY is available in deploy.yaml."
          fi

      - name: Set AWS Credentials from GitHub Secrets
        run: |
          echo "üîç Exporting AWS credentials..."
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "‚úÖ AWS credentials set."

      - name: Install Dependencies & Package Lambda Functions
        run: |
          cd deployment
          mkdir -p lambda_packages

          declare -A lambda_files
          lambda_files=( 
            ["lambda_iam"]="iam_scanner.py" 
            ["lambda_report"]="report_generator.py" 
            ["lambda_ec2"]="ec2_scanner.py" 
            ["lambda_s3"]="s3_scanner.py")

          for dir in "${!lambda_files[@]}"; do
            mkdir -p lambda_packages/$dir
            if [[ -f terraform/modules/$dir/requirements.txt ]]; then
              pip install --no-warn-script-location --requirement terraform/modules/$dir/requirements.txt -t lambda_packages/$dir/ || true
            fi
            
            if [[ -f ../src/${lambda_files[$dir]} ]]; then
              echo "‚úÖ Copying ../src/${lambda_files[$dir]} to lambda_packages/$dir/"
              cp ../src/${lambda_files[$dir]} lambda_packages/$dir/lambda_function.py
              cd lambda_packages/$dir && zip -r lambda_function.zip . && mv lambda_function.zip ../../terraform/modules/$dir/
              cd ../../
            else
              echo "‚ùå Error: Required source file ../src/${lambda_files[$dir]} is missing! Aborting deployment."
              ls -R ../src/
              exit 1
            fi
          done

      - name: Debug Check If Lambda ZIPs Exist
        run: |
          echo "üîç Verifying Lambda function zip files..."
          for dir in lambda_iam lambda_report lambda_ec2 lambda_s3; do
            if [[ -f deployment/terraform/modules/$dir/lambda_function.zip ]]; then
              echo "‚úÖ deployment/terraform/modules/$dir/lambda_function.zip exists!"
            else
              echo "‚ùå deployment/terraform/modules/$dir/lambda_function.zip is missing!"
              exit 1
            fi
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Deploy with Terraform
        run: |
          cd deployment/terraform
          terraform init
          terraform plan -out=tfplan
          terraform show tfplan > plan.txt
          cat plan.txt
          terraform show -json tfplan > plan.json
          cat plan.json

          if [[ $? -ne 0 ]]; then
            echo "‚ùå Terraform plan failed! Aborting deployment."
            exit 1
          fi

          terraform apply -auto-approve

      - name: Cleanup Old Lambda Functions (Optional)
        run: |
          echo "üîç Checking for old Lambda functions to delete..."
          FUNCTIONS_TO_DELETE=$(aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `IAMSecurityScanner`)].FunctionName' --output text)

          if [[ -z "$FUNCTIONS_TO_DELETE" ]]; then
            echo "‚úÖ No old Lambda functions to delete."
          else
            echo "‚ö†Ô∏è Deleting old Lambda functions..."
            for FUNCTION in $FUNCTIONS_TO_DELETE; do
              aws lambda delete-function --function-name "$FUNCTION"
              echo "üóë Deleted: $FUNCTION"
            done
          fi
