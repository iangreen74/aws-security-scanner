name: Deploy AWS Security Scanner

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug AWS Secrets in Deploy Workflow
        run: |
          set -x
          echo "üîç Checking AWS Secrets inside deploy.yaml..."
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]]; then
            echo "‚ùå AWS_ACCESS_KEY_ID is NOT available in deploy.yaml!"
            exit 1
          else
            echo "‚úÖ AWS_ACCESS_KEY_ID is available in deploy.yaml."
          fi

          if [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY is NOT available in deploy.yaml!"
            exit 1
          else
            echo "‚úÖ AWS_SECRET_ACCESS_KEY is available in deploy.yaml."
          fi

      - name: Set AWS Credentials from GitHub Secrets
        run: |
          echo "üîç Exporting AWS credentials..."
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "‚úÖ AWS credentials set."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Debug IAM Role & Terraform State Before Import
        run: |
          set -x
          cd deployment/terraform
          echo "üîç Checking if IAM role already exists..."
          aws iam get-role --role-name "LambdaExecutionRole" --query "Role.Arn" --output text || echo "‚ùå IAM Role not found."

          echo "üîç Checking Terraform state before import..."
          terraform state list || echo "‚ö†Ô∏è No state found."

      - name: Import IAM Role Without Hanging
        run: |
          set -x
          cd deployment/terraform
          ROLE_NAME="LambdaExecutionRole"
          ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query "Role.Arn" --output text 2>/dev/null || echo "")

          if [[ -n "$ROLE_ARN" ]]; then
            echo "‚úÖ IAM Role $ROLE_NAME exists. Importing into Terraform..."
            terraform init
            timeout 120 terraform import module.iam.aws_iam_role.lambda_exec "$ROLE_NAME" & disown
            sleep 5

            IMPORT_PID=$!
            echo "üîç Import process running with PID: $IMPORT_PID"
            wait $IMPORT_PID || echo "‚ö†Ô∏è Import failed or took too long. Moving on."

            terraform apply -refresh-only -auto-approve || echo "‚ö†Ô∏è Terraform apply failed!"
          else
            echo "‚ö†Ô∏è IAM Role $ROLE_NAME does not exist. Terraform will create a new one."
          fi

          echo "LAMBDA_ROLE_ARN=${ROLE_ARN:-'arn:aws:iam::000000000000:role/PlaceholderRole'}" >> $GITHUB_ENV

      - name: Debug Terraform State After Import
        run: |
          set -x
          cd deployment/terraform
          echo "üîç Checking Terraform state after import..."
          terraform state list || echo "‚ö†Ô∏è No state found after import."

      - name: Deploy with Terraform
        run: |
          set -x
          cd deployment/terraform
          terraform init

          echo "üîç Running Terraform Plan..."
          terraform plan -var="lambda_role_arn=$LAMBDA_ROLE_ARN" -out=tfplan -input=false
          terraform show tfplan > plan.txt
          cat plan.txt

          terraform show -json tfplan > plan.json
          cat plan.json

          if [[ $? -ne 0 ]]; then
            echo "‚ùå Terraform plan failed! Aborting deployment."
            exit 1
          fi

          terraform apply -var="lambda_role_arn=$LAMBDA_ROLE_ARN" -auto-approve -input=false || echo "‚ö†Ô∏è Terraform apply failed!"

      - name: Cleanup Unused Lambda Functions (Optional)
        run: |
          set -x
          echo "üîç Checking for old Lambda functions to delete..."
          EXISTING_FUNCTIONS=$(aws lambda list-functions --query 'Functions[*].FunctionName' --output text)
          DEPLOYED_FUNCTIONS="IAMSecurityScanner ReportGenerator EC2Scanner S3Scanner"

          for FUNCTION in $EXISTING_FUNCTIONS; do
            if [[ ! " $DEPLOYED_FUNCTIONS " =~ " $FUNCTION " ]]; then
              echo "üóë Deleting unused Lambda function: $FUNCTION"
              aws lambda delete-function --function-name "$FUNCTION"
            fi
          done
