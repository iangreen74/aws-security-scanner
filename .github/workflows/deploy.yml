name: Deploy AWS Security Scanner

on:
  workflow_run:
    workflows: ['AWS Security Scanner CI'] # ✅ Ensure it matches test workflow name
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # ✅ Ensures deployment only runs if tests pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with IAM Role
        id: configure-iam
        continue-on-error: true # ✅ Allows fallback to static credentials if this fails
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::418295677815:role/GitHubActionsRole
          role-session-name: GitHubActions
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Configure AWS Credentials with Static Keys (Fallback)
        if: steps.configure-iam.outcome == 'failure' # ✅ Only runs if IAM role fails
        run: |
          echo "⚠️ IAM authentication failed. Falling back to static credentials..."
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "AWS credentials configured successfully!"

      - name: Install Dependencies & Package Lambda Functions
        run: |
          cd deployment
          mkdir -p lambda_packages

          declare -A lambda_files
          lambda_files=( 
            ["lambda_iam"]="iam_scanner.py" 
            ["lambda_report"]="report_generator.py" 
            ["lambda_ec2"]="ec2_scanner.py" 
            ["lambda_s3"]="s3_scanner.py"
          )

          for dir in "${!lambda_files[@]}"; do
            mkdir -p lambda_packages/$dir
            if [[ -f terraform/modules/$dir/requirements.txt ]]; then
              pip install --no-warn-script-location --requirement terraform/modules/$dir/requirements.txt -t lambda_packages/$dir/ || true  # ✅ Ignore missing package errors
            fi
            cp src/${lambda_files[$dir]} lambda_packages/$dir/lambda_function.py  # ✅ Copy correct handler
            cd lambda_packages/$dir && zip -r ../../terraform/modules/$dir/lambda_function.zip .
            cd ../../
          done

      - name: Deploy with Terraform
        run: |
          cd deployment/terraform
          terraform init
          terraform apply -auto-approve
